package com.yishan.javaplus.config;import com.amazonaws.services.s3.AmazonS3;import com.amazonaws.services.sqs.AmazonSQS;import com.amazonaws.services.sqs.model.GetQueueUrlResult;import com.yishan.javaplus.service.StorageService;import com.yishan.javaplus.service.jms.MessageSQSService;import org.mockito.Mockito;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.context.annotation.Profile;import java.io.IOException;import static org.mockito.Mockito.when;@Configurationpublic class MockConfig {    @Bean    @Profile("unit")    public StorageService getStorageService(@Autowired AmazonS3 s3Client) throws IOException {        StorageService storageService = new StorageService(s3Client);        storageService.setBucket("unit_test");        return storageService;    }    @Bean    @Profile("unit")    public MessageSQSService getMessageSQSService(@Autowired AmazonSQS sqsClient) throws IOException{        MessageSQSService messageSQSService = new MessageSQSService(sqsClient,"${queueName}");        //messageSQSService.sendMessageRequest("xxx");       // messageSQSService.receiveMessageRequest();        return messageSQSService;    }    @Bean    public AmazonS3 getAmazonS3Client(){        AmazonS3 s3Client = Mockito.mock(AmazonS3.class);        return s3Client;    }    @Bean    @Primary    public AmazonSQS getAmazonSQSClient(){        AmazonSQS sqsClient = Mockito.mock(AmazonSQS.class);        GetQueueUrlResult queueUrlResult = Mockito.mock(GetQueueUrlResult.class);        when(sqsClient.getQueueUrl("${queueName}")).thenReturn(queueUrlResult);        return sqsClient;    }}