package com.yishan.javaplus.config;import com.yishan.javaplus.extend.security.JwtAuthenticationFilter;import com.yishan.javaplus.extend.security.RestAuthenticationEntryPoint;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.config.BeanIds;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.AuthenticationEntryPoint;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;@Configuration@EnableWebSecuritypublic class SecurityConfig extends WebSecurityConfigurerAdapter {    @Autowired    private UserDetailsService userDetailService;    @Autowired    private JwtAuthenticationFilter jwtAuthenticationFilter;    @Autowired    private AuthenticationEntryPoint authenticationEntryPoint;    @Autowired    private RestAuthenticationEntryPoint restAuthenticationEntryPoint;    @Autowired    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {        PasswordEncoder encoder = new BCryptPasswordEncoder();        auth.userDetailsService(userDetailService).passwordEncoder(encoder);    }    @Bean(name = BeanIds.AUTHENTICATION_MANAGER)    @Override    public AuthenticationManager authenticationManagerBean() throws Exception {        return super.authenticationManagerBean();    }    protected void configure(HttpSecurity http) throws Exception {        http.csrf().disable().addFilterAt(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class)                .authorizeRequests().antMatchers("/api/users/login", "/api/user/login", "/api/users/signup", "/api/garages", "/api/garage").permitAll().                and()                .authorizeRequests().antMatchers("/api/**").hasAnyRole("ROLE_REGISTERED_USER", "ADMIN")                .and()                .exceptionHandling().authenticationEntryPoint(restAuthenticationEntryPoint)                .and()                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);    }}